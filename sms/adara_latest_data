#!/bin/bash
#
# ADARA "Latest Data" Script...! ;-D
#
# Script to Automate the Searching for and Monitoring of
# the Latest/Most Recently Written Raw Data Stream File
# currently being generated by the SMS.
#

#
# Defaults:
#

ADARA_PARSER="/usr/local/bin/adara-parser"

SMS_DATA="/SNSlocal/sms/data"

BASENAME="/usr/bin/basename"
DATE="/usr/bin/date"
HEAD="/usr/bin/head"
TAIL="/usr/bin/tail"
Less="/usr/bin/less"
AWK="/usr/bin/awk"
WC="/usr/bin/wc"
GREP="/bin/grep"
SED="/bin/sed"
CP="/bin/cp"
MV="/bin/mv"
LS="/bin/ls"

USAGE()
{
	echo -e "\nusage: adara_latest_data \\"
	echo "    [--SMS|--sms] [--OLDSMS|--oldsms] \\"
	echo "    [--nED|--ned|--ds=1] \\"
	echo "    [--PVSD|--pvsd|--ds=3] \\"
	echo "    [--ds=<N>] \\"
	echo "    [--timeout=1|-t=1] \\"
	echo "    [--sms_data=<${SMS_DATA}>] \\"
	echo "    [--adara_parser=<${ADARA_PARSER}>] \\"
	echo "    [--extra_parser_args=\"--events\"]  \\"
	echo "    [--search=\" [56]00[0-5]\"]  \\"
	echo "    [--extra_search_args=\"-B 1 -A 3\"]  \\"
	echo "    [--extra_tail_args=\"-20\"]  \\"
	echo "    [--help|-h]"
	echo
}

CHECK_PROCEED()
{
	local _proceed_query="Proceed"
	local _alt_query=0

	if [[ "#$1#" != '##' ]]; then
		_proceed_query="$1"
		_alt_query=1
	fi

	local _proceed_ck=""

	echo -e -n "\n${_proceed_query} (yes/No)? "
	read _proceed_ck

	_proceed_ck=`echo "${_proceed_ck}" | tr '[:upper:]' '[:lower:]'`

	if [[ -z ${_proceed_ck} || ${_proceed_ck} == "n" \
			|| ${_proceed_ck} == "no" ]]; then
		# Alternate Query? Just Return...
		if [[ ${_alt_query} == 1 ]]; then
			return 99
		# Else Actually Exit Script...
		else
			echo -e "\nExiting ADARA Latest Data at User's Request.\n"
			exit 99
		fi
	fi

	return 0
}

#
# Parse Command Line Arguments
#

FILE_TYPE="SMS"
FILE_PREFIX="m"

TIMEOUT=1

EXTRA_PARSER_ARGS=""

SEARCH=""

EXTRA_SEARCH_ARGS=""

EXTRA_TAIL_ARGS=""

for arg in "$@" ; do

	key=`echo "$arg" | ${AWK} -F = '{print $1}'`
	value=`echo "$arg" | ${AWK} -F = '{print $2}'`

	if [[ "#$key#" == '#--SMS#' || "#$key#" == '#--sms#' ]]; then
		FILE_TYPE="SMS"
		echo -e "\nSetting ADARA Stream File Type to:\n\n\t[${FILE_TYPE}]"
		FILE_PREFIX="m"
		echo -e "\n\tFile Prefix: \"${FILE_PREFIX}\""
	elif [[ "#$key#" == '#--OLDSMS#' || "#$key#" == '#--oldsms#' ]]; then
		FILE_TYPE="OLDSMS"
		echo -e "\nSetting ADARA Stream File Type to:\n\n\t[${FILE_TYPE}]"
		FILE_PREFIX="f"
		echo -e "\n\tFile Prefix: \"${FILE_PREFIX}\""
	elif [[ "#$key#" == '#--nED#' || "#$key#" == '#--ned#' ]]; then
		FILE_TYPE="nED"
		echo -e "\nSetting ADARA Stream File Type to:\n\n\t[${FILE_TYPE}]"
		FILE_PREFIX="ds00000001-s"
		echo -e "\n\tFile Prefix: \"${FILE_PREFIX}\""
	elif [[ "#$key#" == '#--PVSD#' || "#$key#" == '#--pvsd#' ]]; then
		FILE_TYPE="PVSD"
		echo -e "\nSetting ADARA Stream File Type to:\n\n\t[${FILE_TYPE}]"
		FILE_PREFIX="ds00000003-s"
		echo -e "\n\tFile Prefix: \"${FILE_PREFIX}\""
	elif [[ "#$key#" == '#--ds#' ]]; then
		# Single-Digit Data Source Numbers...
		if [[ ${value} -lt 10 ]]; then
			FILE_TYPE="DataSource#${value}"
			FILE_PREFIX="ds0000000${value}-s"
		# Double-Digit Data Source Numbers...
		elif [[ ${value} -lt 100 ]]; then
			FILE_TYPE="DataSource#${value}"
			FILE_PREFIX="ds000000${value}-s"
		else
			echo -n "\nReally...?! More than 100 Data Sources...?? ;-D"
			exit -99
		fi
		echo -e "\nSetting ADARA Stream File Type to:\n\n\t[${FILE_TYPE}]"
		echo -e "\n\tFile Prefix: \"${FILE_PREFIX}\""
	elif [[ "#$key#" == '#--timeout#' || "#$key#" == '#-t#' ]]; then
		TIMEOUT="${value}"
		echo -e "\nSetting Keyboard Timeout to:  [${TIMEOUT}]"
	elif [[ "#$key#" == '#--sms_data#' ]]; then
		SMS_DATA="${value%/}"
		echo -e "\nSetting SMS Data Directory to:\n\t[${SMS_DATA}]"
	elif [[ "#$key#" == '#--adara_parser#' ]]; then
		ADARA_PARSER="${value}"
		echo -e "\nSetting ADARA Parser Path to:\n\t[${ADARA_PARSER}]"
	elif [[ "#$key#" == '#--extra_parser_args#' ]]; then
		EXTRA_PARSER_ARGS="${value}"
		echo -e "\nSetting Extra ADARA Parser Args to:"
		echo -e "\n\t[${EXTRA_PARSER_ARGS}]"
	elif [[ "#$key#" == '#--search#' ]]; then
		SEARCH="${SEARCH} -e \"${value}\""
		echo -e "\nSetting Parser Search Pattern(s) to:\n\t[${SEARCH}]"
	elif [[ "#$key#" == '#--extra_search_args#' ]]; then
		EXTRA_SEARCH_ARGS="${value}"
		echo -e "\nSetting Extra Search Args to:"
		echo -e "\n\t[${EXTRA_SEARCH_ARGS}]"
	elif [[ "#$key#" == '#--extra_tail_args#' ]]; then
		EXTRA_TAIL_ARGS="${value}"
		echo -e "\nSetting Extra Tail Args to:"
		echo -e "\n\t[${EXTRA_TAIL_ARGS}]"
	elif [[ "#$key#" == '#--help#' || "#$key#" == '#-h#' ]]; then
		USAGE
		exit 0
	else
		echo -e "\nError: Unknown Command Line Option [${arg}]"
		USAGE
		exit 1
	fi

done

CMD_USAGE()
{
	echo -e "\nADARA Latest Data Interactive Command Usage:\n"

	echo -e "  P or p     = Parse Latest Raw Data File (Thru Less)\n"
	echo -e "  G or g     = Grep Latest Raw Data File for Search Pattern\n"
	echo -e "  T or t     = Tail Latest Raw Data File, Search for Pattern\n"
	echo -e "  R or r     = Set Extra Parser Args (e.g. \"--events\")\n"
	echo -e "  S or s     = Set Search Pattern\n"
	echo -e "  C or c     = Set Extra "Search" Args (e.g. \"-B 1 -A 3\")\n"
	echo -e "  A or a     = Append to Search Pattern\n"
	echo -e "  L or l     = Set Extra Tail Args (e.g. \"-20\")\n"
	echo -e "H or h or ?  = Display this Interactive Command Usage\n"
}

DO_CMD()
{
	local _cmd="$1"
	shift

	if [[ "${_cmd}" == "Q" || "${_cmd}" == "q" ]]; then
		echo -e "\nExiting ADARA Latest Data at User's Request.\n"
		exit 0
	elif [[ "${_cmd}" == "P" || "${_cmd}" == "p" ]]; then
		echo -e "\nParsing Latest Raw Data File:  [${datafile}]"
		${ADARA_PARSER} ${EXTRA_PARSER_ARGS} \
			"${fullrawdir}/${datafile}" \
				| ${Less}
	elif [[ "${_cmd}" == "G" || "${_cmd}" == "g" ]]; then
		if [[ -z "${SEARCH}" ]]; then
			echo -e "\n*** Error: No Search Pattern Specified!"
			echo -e "\nPlease Use 'S' or 's' to Set Search Pattern."
			CHECK_PROCEED
		else
			echo -e "\nGrep Latest Raw Data File [${datafile}]"
			echo -e "   for Search Pattern [${SEARCH}]"
			${ADARA_PARSER} ${EXTRA_PARSER_ARGS} \
				"${fullrawdir}/${datafile}" \
					| eval "${GREP} ${EXTRA_SEARCH_ARGS} ${SEARCH}" \
					| ${Less}
		fi
	elif [[ "${_cmd}" == "T" || "${_cmd}" == "t" ]]; then
		if [[ -z "${SEARCH}" ]]; then
			echo -e "\n*** Error: No Search Pattern Specified!"
			echo -e "\nPlease Use 'S' or 's' to Set Search Pattern."
			CHECK_PROCEED
		else
			echo -e "\nTail Latest Raw Data File [${datafile}]"
			echo -e "   Searching for Pattern [${SEARCH}]"
			echo -e "---------"
			${ADARA_PARSER} ${EXTRA_PARSER_ARGS} \
				"${fullrawdir}/${datafile}" \
					| eval "${GREP} ${EXTRA_SEARCH_ARGS} ${SEARCH}" \
					| ${TAIL} ${EXTRA_TAIL_ARGS}
			CHECK_PROCEED
		fi
	elif [[ "${_cmd}" == "R" || "${_cmd}" == "r" ]]; then
		echo -e -n "\nPlease Enter New Extra ADARA Parser Args: "
		IFS="" read pattern
		EXTRA_PARSER_ARGS="${pattern}"
		echo -e "\nNew Extra ADARA Parser Args Set to:"
		echo -e "\n\t[${EXTRA_PARSER_ARGS}]"
	elif [[ "${_cmd}" == "S" || "${_cmd}" == "s" ]]; then
		echo -e -n "\nPlease Enter New Search Pattern: "
		IFS="" read pattern
		SEARCH="-e \"${pattern}\""
		echo -e "\nNew Search Pattern Set to: [${SEARCH}]"
	elif [[ "${_cmd}" == "C" || "${_cmd}" == "c" ]]; then
		echo -e -n "\nPlease Enter New Extra Search Args: "
		IFS="" read pattern
		EXTRA_SEARCH_ARGS="${pattern}"
		echo -e "\nNew Extra Search Args Set to:"
		echo -e "\n\t[${EXTRA_SEARCH_ARGS}]"
	elif [[ "${_cmd}" == "A" || "${_cmd}" == "a" ]]; then
		echo -e -n "\nPlease Enter Search Pattern to Append: "
		read pattern
		SEARCH="${SEARCH} -e \"${pattern}\""
		echo -e "\nSearch Pattern Appended to: [${SEARCH}]"
	elif [[ "${_cmd}" == "L" || "${_cmd}" == "l" ]]; then
		echo -e -n "\nPlease Enter New Extra Tail Args: "
		IFS="" read pattern
		EXTRA_TAIL_ARGS="${pattern}"
		echo -e "\nNew Extra Tail Args Set to:"
		echo -e "\n\t[${EXTRA_TAIL_ARGS}]"
	elif [[ "${_cmd}" == "H" || "${_cmd}" == "h" \
			|| "${_cmd}" == "?" ]]; then
		CMD_USAGE
		CHECK_PROCEED
	# Ignore Carriage Returns... ;-D
	elif [[ "${_cmd}" != "" ]]; then
		CMD_USAGE
		echo "Error: Unknown Interactive Command [${_cmd}]...!"
		CHECK_PROCEED
	fi
}

# Loop Searching for Latest Raw Data File...

while [[ true ]]; do

	echo
	${DATE}

	echo -e "\nUsing SMS Raw Data in:  [${SMS_DATA}]"

	# Find the Most Recently Dated Subdirectory Under SMS Data...

	fulldatedir=`${LS} -r -d ${SMS_DATA}/2* | ${HEAD} -1`
	datedir=`${BASENAME} ${fulldatedir}`

	echo "Looking in Most Recent Date Subdirectory:  [${datedir}]"

	# Find the Most Recent Dated Raw Data Subdirectory...

	fullrawdir=`${LS} -r -d ${fulldatedir}/* | ${HEAD} -1`
	rawdir=`${BASENAME} ${fullrawdir}`

	echo "Using Local ${FILE_TYPE} Raw Data in:  [${rawdir}]"

	# Find the Most Recent Raw Data File...

	datafile=`${LS} -t ${fullrawdir} \
		| ${GREP} -e "^${FILE_PREFIX}.*\.adara$" \
		| ${HEAD} -1`

	echo "Found Latest ${FILE_TYPE} Raw Data File:  [${datafile}]"

	echo "   [${fullrawdir}/${datafile}]"

	echo
	${LS} -l "${fullrawdir}/${datafile}" | ${SED} "s#${fullrawdir}/##"

	# Check for Interactive Command Input...
	IFS="" read -t ${TIMEOUT} -n 1 -s cmd

	# Got a Command, Execute It...
	if [[ $? == 0 ]]; then
		DO_CMD "$cmd"
	fi

done

