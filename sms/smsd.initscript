#!/bin/bash
#
# smsd		This shell script takes care of starting and stopping
#		SMS for the ADARA system
#
# chkconfig: - 98 94
# description: SMS is the ADARA Stream Management Service

### BEGIN INIT INFO
# Provides: smsd
# Required-Start: $network $local_fs $remote_fs
# Required-Stop: $network $local_fs $remote_fs
# Should-Start: $syslog $named
# Should-Stop: $syslog $named
# Short-Description: start and stop smsd
# Description: SMS is the ADARA Stream Management Service
### END INIT INFO

# Source function library.
. /etc/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

prog=smsd
lockfile=/var/lock/subsys/$prog

# Make Sure the "Home Controls" Mount is Present Before Proceeding...!
HOME_CONTROLS="/home/controls/config-daq1"
retry_count=0
while [[ ! -d ${HOME_CONTROLS} ]]; do
	echo "SMSD Init: Waiting for Home Controls to Mount...!"
	/bin/ls -l "${HOME_CONTROLS}"
	sleep 3
	retry_count=$(( retry_count + 1 ))
	if [[ ${retry_count} -gt 30 ]]; then
		echo "SMSD Init: Giving Up on the Home Controls Mount...!"
		echo "Someone Call Jeeeeeeeeeeeeeeeeeeeeeeem...!"
		exit 90
	fi
done

# Get Base EPICS Executable Path (for potential caRepeater startup)
export EPICS_BASE="/home/controls/prod/ADARA/EpicsBaseLink"
if [[ -x "${EPICS_BASE}"/startup/EpicsHostArch.pl ]]; then
	export EPICS_HOST_ARCH=`"${EPICS_BASE}"/startup/EpicsHostArch.pl`
else
	export EPICS_HOST_ARCH="none"
fi
export PATH="${EPICS_BASE}/bin/${EPICS_HOST_ARCH}:${PATH}"

# Other EPICS Environment Settings
export EPICS_BASEV4="/home/controls/prod/ADARA/EpicsBaseV4Link"
export EPICS_EXTENSIONS="/home/controls/prod/ADARA/EpicsExtensionsLink"
export EPICS_CA_AUTO_ADDR_LIST="NO"
export EPICS_CA_MAX_ARRAY_BYTES="100000000"
export EPICS_CA_ADDR_LIST="10.111.XXX.255 160.91.228.17"
# NOTE: Resolve "XXX" Per Beamline Subnet

export PATH=/usr/local/bin:$PATH

export DAEMON_COREFILE_LIMIT="unlimited"

export ADARA_USER="snsdata"
export ADARA_GROUP="adara"

# Don't Actually Use "daemon" Function, Write Our Own... ;-b
# Because we need to set group id...
# (Heisted from the original in /etc/init.d/functions...)
mydaemon() {
	# Test syntax.
	local gotbase= force= nicelevel corelimit
	local pid base= user= group= nice= bg= pid_file=
	local cgroup=
	nicelevel=0
	while [ "$1" != "${1##[-+]}" ]; do
	  case $1 in
	    '')    echo $"$0: Usage: mydaemon [+/-nicelevel] {program}" "[arg1]..."
	           return 1;;
	    --check)
		   base=$2
		   gotbase="yes"
		   shift 2
		   ;;
	    --check=?*)
	    	   base=${1#--check=}
		   gotbase="yes"
		   shift
		   ;;
	    --user)
		   user=$2
		   shift 2
		   ;;
	    --user=?*)
	           user=${1#--user=}
		   shift
		   ;;
	    --group)
		   group=$2
		   shift 2
		   ;;
	    --group=?*)
	           group=${1#--group=}
		   shift
		   ;;
	    --pidfile)
		   pid_file=$2
		   shift 2
		   ;;
	    --pidfile=?*)
		   pid_file=${1#--pidfile=}
		   shift
		   ;;
	    --force)
	    	   force="force"
		   shift
		   ;;
	    [-+][0-9]*)
	    	   nice="nice -n $1"
	           shift
		   ;;
	    *)     echo $"$0: Usage: daemon [+/-nicelevel] {program}" "[arg1]..."
	           return 1;;
	  esac
	done

        # Save basename.
        [ -z "$gotbase" ] && base=${1##*/}

        # See if it's already running. Look *only* at the pid file.
	__pids_var_run "$base" "$pid_file"

	[ -n "$pid" -a -z "$force" ] && return

	# make sure it doesn't core dump anywhere unless requested
	corelimit="ulimit -S -c ${DAEMON_COREFILE_LIMIT:-0}"

	# if they set NICELEVEL in /etc/sysconfig/foo, honor it
	[ -n "${NICELEVEL:-}" ] && nice="nice -n $NICELEVEL"

	# if they set CGROUP_DAEMON in /etc/sysconfig/foo, honor it
	if [ -n "${CGROUP_DAEMON}" ]; then
		if [ ! -x /bin/cgexec ]; then
			echo -n "Cgroups not installed"; warning
			echo
		else
			cgroup="/bin/cgexec";
			for i in $CGROUP_DAEMON; do
				cgroup="$cgroup -g $i";
			done
		fi
	fi

	# Echo daemon
        [ "${BOOTUP:-}" = "verbose" -a -z "${LSB:-}" ] && echo -n " $base"

	# And start it up.
	if [ -z "$user" -a -z "$group" ]; then
	   $cgroup $nice /bin/bash -c "$corelimit >/dev/null 2>&1 ; $*"
	else
	   local _ruser=""
	   local _rgroup=""
	   if [ -n "$user" ]; then
	      _ruser="$user"
	   fi
	   if [ -n "$group" ]; then
	      _rgroup="-g $group"
	   fi
	   $cgroup $nice runuser -s /bin/bash ${_rgroup} ${_ruser} -c "$corelimit >/dev/null 2>&1 ; $*"
	fi

	[ "$?" -eq 0 ] && success $"$base startup" || failure $"$base startup"
}

start() {
	[ "$EUID" != "0" ] && exit 4
	[ "$NETWORKING" = "no" ] && exit 1
	[ -x /usr/local/bin/smsd ] || exit 5

        # Start daemons, _My Way_... ;-b
        echo -n $"Starting $prog: "
        mydaemon --user $ADARA_USER --group $ADARA_GROUP $prog $OPTIONS
	RETVAL=$?
        echo
	[ $RETVAL -eq 0 ] && touch $lockfile
	return $RETVAL
}

stop() {
	[ "$EUID" != "0" ] && exit 4
        echo -n $"Shutting down $prog: "
	killproc $prog
	RETVAL=$?
        echo
	[ $RETVAL -eq 0 ] && rm -f $lockfile
	return $RETVAL
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	status $prog
	;;
  restart|force-reload)
	stop
	start
	;;
  try-restart|condrestart)
	if status $prog > /dev/null; then
	    stop
	    start
	fi
	;;
  reload)
	exit 3
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|try-restart|force-reload}"
	exit 2
esac
