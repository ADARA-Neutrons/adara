#!/bin/bash
#
# PVSD Config Check
#
# Compare Git Repo Config Files to Deployed...
#

# For Cron Usage - Source Home Shell Environment:
if [ -e $HOME/.bash_profile ] ; then
	source $HOME/.bash_profile
fi

# Note: to ensure proper file permissions for captured system files,
# please set your shell "umask" as follows before proceeding! ;-D
umask 0002

# Catch Errors Amidst Pipelines... ;-Q
set -o pipefail

# Handle "Quiet" Operation Option for Cron Usage...
# (Only output on errors...)
UPDATE=0
QUIET=0
if [[ "$1" == "--quiet" ]]; then
	QUIET=1
elif [[ "$1" == "--update" ]]; then
	UPDATE=1
elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
	echo -e "\nusage: confck [--quiet|--update]\n"
	exit 0
fi

# ADARA Git Repo
if [ -z "$ADARA_DIR" ]; then
	ADARA_DIR="/usr/local/src/ADARA"
	#ADARA_DIR="/SNS/users/$USER/gitsrc/ADARA"
elif [[ $QUIET == 0 ]]; then
	echo "Inheriting ADARA_DIR Value from User Environment:"
	echo -e "\t[${ADARA_DIR}]"
fi

# Default Update/Installation Target Definitions
SYSTEMCTL="/usr/bin/systemctl"
PVSD_LOG="/var/log/pvsd.log"
MESSAGES_LOG="/var/log/messages"
RSYSLOG_PIPES="/etc/rsyslog.pipes"
MKNOD="/usr/bin/mknod"
CRITICAL_MSGS="criticalMessages"
SNSLOCAL="/SNSlocal"
RSYSLOG_CACHE="${SNSLOCAL}/rsyslog.cache"
PVSD_LINK="/usr/sbin/pvsd"
PVSD_BINARY="/home/controls/config-dassrv1/deploy/pvsd"
ACCEL_TIMING="/home/controls/Accelerator"
ACCEL_TIMING_REPO="git+ssh://trac.sns.gov/var/repos/Accelerator"
CHMOD="/usr/bin/chmod"
CHGRP="/usr/bin/chgrp"
CHOWN="/usr/bin/chown"
MKDIR="/usr/bin/mkdir"
TOUCH="/usr/bin/touch"
DIFF="/usr/bin/diff"
SUDO="/usr/bin/sudo"
TAIL="/usr/bin/tail"
AWK="/usr/bin/awk"
GREP="/bin/grep"
LN="/usr/bin/ln"
CP="/bin/cp"
LS="/bin/ls"
RM="/bin/rm"

# Go to proper Git Config Repo Checkout, for easy checking systemwide.
cd /home/controls/config-dassrv1/

STAT_LIST="./stat_list"

DIFF_STAT()
{
	local _status=0

	local _label="$1"
	shift

	local _file="$1"
	shift

	local _statlist="$1"
	shift

	echo -e "\nDiff Stat for ${_file}"

	stat --printf='%A %F %U %G ' "${_file}" > .tmp.A.$$
	local _ckstat=$?
	if [ ${_ckstat} != 0 ]; then
		_status=${_ckstat}
	fi
	echo "${_file}" >> .tmp.A.$$

	${GREP} "${_file}$" "${_statlist}" > .tmp.B.$$
	local _ckgrep=$?
	if [ ${_ckgrep} != 0 ]; then
		_status=${_ckgrep}
	fi

	${DIFF} .tmp.A.$$ .tmp.B.$$
	local _ckdiff=$?
	if [ ${_ckdiff} != 0 ]; then
		_status=${_ckdiff}
	fi

	${RM} .tmp.A.$$ .tmp.B.$$

	return ${_status}
}

DIFF_FILE()
{
	local _status=0

	local _label1="$1"
	shift

	local _label2="$1"
	shift

	# Git Repo Version of File
	local _file1="$1"
	shift

	# System Deployed Version of File
	local _file2="$1"
	shift

	echo
	echo "Comparing ${_label1}"
	echo -e "\tto ${_label2}:"
	echo

	echo "${DIFF} ${_file1} ${_file2}"
	${DIFF} "${_file1}" "${_file2}"
	local _ckdiff=$?
	if [ ${_ckdiff} != 0 ]; then
		_status=${_ckdiff}
		# Update the Deployed System File or Git Repo File Version...
		if [[ $UPDATE == 1 ]]; then
			echo -e "\nPush/Deploy the System File (\"sys\"),"
			echo -e "   or Pull/Update the Git Repo File (\"repo\"),"
			echo -n "   or Do Nothing (\"nothing\")? [sys|repo|Nothing]: "
			read ckUpdate
			ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
			# Push Latest Git Repo Version to System
			if [[ "$ckUpdate" == "s" || "$ckUpdate" == "sys" ]]; then
				echo "Deploying Latest Repo File to System:"
				${SUDO} ${CP} -i "${_file1}" "${_file2}"
			# Pull Latest System Version into Git Repo
			elif [[ "$ckUpdate" == "r" || "$ckUpdate" == "repo" ]]; then
				echo "Updating Repo with Latest Deployed System File:"
				${CP} -i "${_file2}" "${_file1}"
				git add "${_file1}"
				git commit \
					-m "Update Config Repo with Latest System File" \
					"${_file1}"
			# Do Nothing.
			else
				echo "Doing Nothing, as Requested."
			fi
		fi
	fi

	DIFF_STAT "${_label2}" "${_file2}" "${STAT_LIST}"
	_ckdiff=$?
	if [ ${_ckdiff} != 0 ]; then
		_status=${_ckdiff}
	fi

	return ${_status}
}

CONFCK()
{
	local _nerrors=0

	echo
	echo "Comparing Git Repo to Deployed:"

	DIFF_FILE "PVSD Wrapper Script" "Deployed" \
		./pvsd/usr.local.bin.pvsd /usr/local/bin/pvsd
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "PVSD Init Script" "Deployed" \
		./pvsd/pvsd.initscript /etc/init.d/pvsd
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "Saved RSyslog ADARA Config" "System" \
		./pvsd/rsyslog.conf /etc/rsyslog.conf
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "RSyslog ADARA Mailer Config" "Deployed" \
		./pvsd/adaraMailer.conf /etc/rsyslog.d/adaraMailer.conf
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "RSyslog PVSD Config" "Deployed" \
		./pvsd/pvsd_syslog.conf /etc/rsyslog.d/pvsd_syslog.conf
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "RSyslog ADARA Mailer Script" "Deployed" \
		./pvsd/rsyslogMailer /usr/local/bin/rsyslogMailer
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "Saved Etc Logrotate PVSD Config" "System" \
		./pvsd/etc.logrotate.d.pvsd_log /etc/logrotate.d/pvsd_log
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "Saved PVSD Monitor Script" "System" \
		./pvsd/usr.local.bin.pvsd_mon.sh /usr/local/bin/pvsd_mon.sh
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	DIFF_FILE "Saved Beamline XML Monitor Script" "System" \
		./pvsd/usr.local.bin.beamline_xml_mon.sh \
			/usr/local/bin/beamline_xml_mon.sh
	if [ $? != 0 ]; then
		echo "Files Differed...!"
		(( _nerrors++ ))
	else
		echo "Files are the Same."
	fi

	echo
	echo "Comparing Saved ChkConfig PVSD ADARA Config to System:"
	echo

	local _check_update=0
	chkconfig --list pvsd > /tmp/chkconfig.pvsd.$$ 2>&1
	if [ $? != 0 ]; then
		echo "Failure Retrieving System ChkConfig for PVSD...!"
		_check_update=1
		(( _nerrors++ ))
	else
		echo "${DIFF} ./pvsd/chkconfig.pvsd /tmp/chkconfig.pvsd.$$"
		${DIFF} ./pvsd/chkconfig.pvsd /tmp/chkconfig.pvsd.$$
		if [ $? != 0 ]; then
			echo "System ChkConfig for PVSD Differed...!"
			_check_update=1
			(( _nerrors++ ))
		else
			echo "System ChkConfig for PVSD is the Same."
		fi
	fi
	${RM} -f /tmp/chkconfig.pvsd.$$
	if [ $? != 0 ]; then
		echo "Failure Deleting Temporary System ChkConfig File for PVSD...!"
		(( _nerrors++ ))
	fi
	# Create PVSD Local Run Level...
	if [[ ${_check_update} == 1 ]]; then
		echo -n "Create PVSD Local Run Level? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			${SUDO} chkconfig --add pvsd
			chkconfig --list pvsd
			${SUDO} chkconfig pvsd on
			chkconfig --list pvsd
			${RM} -i pvsd/chkconfig.pvsd
			chkconfig --list pvsd > ./pvsd/chkconfig.pvsd 2>&1
		fi
	fi

	echo
	echo "Comparing Saved ADARA Admin Crontab to System:"
	echo

	_check_update=0
	crontab -l > /tmp/$USER.crontab.$$ 2>&1
	if [[ $? != 0 || ! -s /tmp/$USER.crontab.$$ ]]; then
		echo "Failure Retrieving ADARA Admin Crontab for PVSD...!"
		_check_update=1
		(( _nerrors++ ))
	else
		echo "${DIFF} ./pvsd/$USER.crontab /tmp/$USER.crontab.$$"
		${DIFF} ./pvsd/$USER.crontab /tmp/$USER.crontab.$$
		if [ $? != 0 ]; then
			echo "ADARA Admin Crontab for PVSD Differed...!"
			_check_update=1
			(( _nerrors++ ))
		else
			echo "ADARA Admin Crontab for PVSD is the Same."
		fi
	fi
	# Defer PVSD Admin Crontab to Below...
	if [[ ${_check_update} == 1 ]]; then
		echo "Defer Fixing of PVSD Admin Crontab..."
		echo "(See Admin Crontab Create Below, or Fix Manually.)"
	fi
	${RM} -f /tmp/$USER.crontab.$$
	if [ $? != 0 ]; then
		echo "Failure Deleting Temporary Admin Crontab File for PVSD...!"
		(( _nerrors++ ))
	fi

	echo
	if [ ${_nerrors} -gt 0 ]; then
		echo "${_nerrors} Errors/Files Differed!"
	else
		echo "All Files/Configs are the Same."
	fi
	echo

	return ${_nerrors}
}

if [[ $QUIET == 1 ]]; then
	doConfCk=`CONFCK 2>&1`
	_ckconfck=$?
	if [[ ${_ckconfck} != 0 ]]; then
		echo -e "$doConfCk\n"
	fi
else
	CONFCK
	_ckconfck=$?
	if [[ ${_ckconfck} != 0 ]]; then
		echo -e "$doConfCk\n"
	fi
fi

if [[ ${_ckconfck} != 0 ]]; then
	echo -e "*** ConfCk FAILED...!\n"
fi

# In Update Mode, Perform Other Assorted Install Operations, As Needed...
if [[ $UPDATE == 1 ]]; then

	echo -e "Checking Other Assorted Install Operations, As Needed...\n"

	# Check/Create PVSD RSyslog Log File...
	${LS} -l "${PVSD_LOG}"
	log_perms=`${LS} -l "${PVSD_LOG}" | ${AWK} '{print $1}'`
	log_group=`${LS} -l "${PVSD_LOG}" | ${AWK} '{print $4}'`
	if [[ ! -f "${PVSD_LOG}"
			|| "$log_perms" != "-rw-rw----"
			|| "$log_group" != "users" ]]; then
		echo -n "Create/Setup PVSD RSyslog Log File? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			${SUDO} ${TOUCH} "${PVSD_LOG}"
			${SUDO} ${CHGRP} users "${PVSD_LOG}"
			${SUDO} ${CHMOD} g+rw "${PVSD_LOG}"
			${LS} -l "${PVSD_LOG}"
			# Restart RSyslog Service...?
			${SUDO} ${SYSTEMCTL} status rsyslog
			echo -n "Restart RSyslog Service? [yes|No] "
			read ckUpdate
			ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
			if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
				${SUDO} ${SYSTEMCTL} restart rsyslog
				${SUDO} ${TAIL} "${MESSAGES_LOG}"
			fi
		fi
	fi
	echo

	# Check/Create RSyslog Pipes...
	${LS} -l "${RSYSLOG_PIPES}"
	if [[ ! -d "${RSYSLOG_PIPES}" ]]; then
		echo -n "Create RSyslog Pipes? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			${SUDO} ${MKDIR} "${RSYSLOG_PIPES}"
			${SUDO} "${MKNOD}" "${RSYSLOG_PIPES}/${CRITICAL_MSGS}" p
			${SUDO} ${CHGRP} snswheel "${RSYSLOG_PIPES}/${CRITICAL_MSGS}"
			${SUDO} ${CHMOD} 660 "${RSYSLOG_PIPES}/${CRITICAL_MSGS}"
			${LS} -l "${RSYSLOG_PIPES}"
			# Set Big Error Pipe...
			echo "Set Big Error Pipe..."
			${CP} ${ADARA_DIR}/big_err_pipe.c /tmp
			cc -o /tmp/big_err_pipe /tmp/big_err_pipe.c
			/tmp/big_err_pipe
		fi
	fi
	echo

	# Check/Create RSyslog Cache...
	${LS} -ld "${RSYSLOG_CACHE}"
	if [[ ! -d "${RSYSLOG_CACHE}" ]]; then
		echo -n "Create RSyslog Cache? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			if [[ ! -d "${SNSLOCAL}" ]]; then
				${SUDO} ${MKDIR} "${SNSLOCAL}"
			fi
			${SUDO} ${MKDIR} "${RSYSLOG_CACHE}"
			${SUDO} ${CHOWN} snsdata "${RSYSLOG_CACHE}"
			${SUDO} ${CHGRP} adara "${RSYSLOG_CACHE}"
			${SUDO} ${CHMOD} g+ws "${RSYSLOG_CACHE}"
			${LS} -ld "${RSYSLOG_CACHE}"
		fi
	fi
	echo

	# Check/Create PVSD Administrator Crontab...
	crontab -l
	crontab_check=`crontab -l |& ${AWK} '{ print $1 " " $2 }'`
	if [[ "$crontab_check" == "no crontab" ]]; then
		echo -n "Create PVSD Administrator Crontab? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			cron_file=`mktemp ./.confck.pvsd.crontab.edit.file.XXXXXX`
			manual_edit=0
			echo "MAILTO=idac_adara_notify@email.ornl.gov" >> $cron_file
			echo -n "PATH=" >> $cron_file
			echo -n "/home/controls/epics/base/master/bin/linux-x86_64:" \
				>> $cron_file
			echo -n "/home/controls/epics/basev4/master/pvAccessCPP/" \
				>> $cron_file
			echo -n "bin/linux-x86_64/:" >> $cron_file
			echo -n "/home/controls/epics/extensions/master/" >> $cron_file
			echo -n "bin/linux-x86_64:" >> $cron_file
			echo -n "/home/controls/epics/extensions/master/bin:" \
				>> $cron_file
			echo -n "/usr/local/SNS/bin:/usr/local/bin:" >> $cron_file
			echo "/usr/bin:/bin:/usr/local/sbin:/sbin:/usr/sbin" \
				>> $cron_file
			echo "0-59/10 * * * * /usr/local/bin/pvsd_mon.sh" >> $cron_file
			echo -n "0 8,17 * * * /home/controls/config-dassrv1/confck" \
				>> $cron_file
			echo " --quiet" >> $cron_file
			echo -n "0 8,17 * * *" >> $cron_file
			echo -n " /home/controls/share/master/scripts/" >> $cron_file
			echo -n "check_beamline_xml --quiet --noprompt" >> $cron_file
			if [[ -n "$BEAMLINE" ]]; then
				echo " /home/controls/$BEAMLINE/beamline.xml" >> $cron_file
			else
				echo " /home/controls/blXXX/beamline.xml" >> $cron_file
				echo -e -n "\nWarning: \$BEAMLINE Environment Variable"
				echo " Not Yet Set."
				echo -e "\nPlease Replace "blXXX" with Beamline Number!\n"
				echo -n "Continue? "
				read foo
				manual_edit=1
			fi
			echo "MAILTO=idac_support@email.ornl.gov" >> $cron_file
			echo "0 * * * * /usr/local/bin/beamline_xml_mon.sh --quiet" \
				>> $cron_file
			echo "MAILTO=kohlja@ornl.gov" >> $cron_file
			echo -n "0 8 * * *" >> $cron_file
			echo " ${ADARA_DIR}/adara_monitor --oneshot" \
				>> $cron_file
			echo -e -n "\n*/10 * * * *" >> $cron_file
			echo " /usr/local/bin/rsyslogMailer > /dev/null 2>&1" \
				>> $cron_file
			# Install Administrator Crontab
			crontab $cron_file
			# Clean Up Temp Crontab File
			${RM} $cron_file
			# Check for Manual Crontab Edit
			if [[ $manual_edit == 1 ]]; then
				crontab -e
			else
				crontab -l
				echo -e -n "\nDo you need to Manually Edit the Crontab?"
				echo -n " [yes|No] "
				read ck_edit
				ck_edit=`echo "$ck_edit" | tr '[:upper:]' '[:lower:]'`
				if [[ "$ck_edit" == "y" || "$ck_edit" == "yes" ]]; then
					crontab -e
				fi
			fi
		fi
	fi
	echo

	# Check/Create PVSD User Local Bin Soft Link...
	${LS} -l "${PVSD_LINK}"
	if [[ ! -x "${PVSD_LINK}" ]]; then
		echo -n "Create PVSD User Local Bin Soft Link? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			${SUDO} ${LN} -s "${PVSD_BINARY}" "${PVSD_LINK}"
			${LS} -l "${PVSD_LINK}"
		fi
	fi
	echo

	# Check/Create Clone of SNS Accelerator Timing Git Repo...
	${LS} -ld "${ACCEL_TIMING}"
	if [[ ! -d "${ACCEL_TIMING}" ]]; then
		echo -n "Create Clone of SNS Accelerator Timing Git Repo? [yes|No] "
		read ckUpdate
		ckUpdate=`echo "$ckUpdate" | tr '[:upper:]' '[:lower:]'`
		if [[ "$ckUpdate" == "y" || "$ckUpdate" == "yes" ]]; then
			git clone "${ACCEL_TIMING_REPO}" "${ACCEL_TIMING}"
			${LS} -l "${ACCEL_TIMING}"
		fi
	fi
	echo

fi

if [[ ${_ckconfck} != 0 || $QUIET == 0 ]]; then
	echo -e "Status = ${_ckconfck}\n"
fi

exit ${_ckconfck}

